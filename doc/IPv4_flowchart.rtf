{\rtf1\ansi\ansicpg1252\cocoartf1187\cocoasubrtf340
\cocoascreenfonts1{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red255\green17\blue30;}
\margl1440\margr1440\vieww12120\viewh8700\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 \ul \ulc0 START : userspace calls sendmsg() or sendto():\
\ulnone 	hooks to sock_sendmsg -> __sock_sendmsg()\
	eventually calls \ul \ulc0 virtual function pointer\ulnone  socket sock->ops->sendmsg 
\b \cf2 // this is where MNET starts!!!
\b0 \cf0 \ul \
	\ulnone sock->ops is a struct proto_ops; TWO OPTIONS: inet_stream_ops or inet_dgram_ops\ul \
	\ulnone BOTH call inet_sendmsg, demuxes based on sock sk->sk_prot->sendmsg\
	sk_prot is a struct proto; TWO OPTIONS: tcp_prot or udp_prot (tcp_sendmsg, udp_sendmsg)\ul \
	\
udp_sendmsg:\
	\
\
ip_queue_xmit:\ulnone \
	does IP routing work to fill skb->dst->dev\
	\ul ip_route_output_ports\ulnone  -> \ul ip_route_output_flow\ulnone  -> \ul __ip_route_output_key\ulnone  -> \ul ip_route_output slow\
		ip_route_output slow:\ulnone  MASSIVE function to generate the struct rtable *rt\
	PUTS everything in struct flowi4 fl4 and struct rtable rt\
\
packet_routed:\
	allocate/build ip header\
	calls \ul ip_local_out\ulnone  -> \ul dst_output\ulnone  -> \ul skb->dst->output\ulnone  -> \ul ip_output:\
	ip_output:\
\ulnone 		set skb->protocol (ETH_P_IP) and skb->dev\
		calls \ul ip_finish_output\ulnone  -> \ul ip_finish_output2:\
		ip_finish_output2:\
			\ulnone check for dst->hh (cached L2 header)\
			eventually call neigh_hh_output or neigh->output\
\
\
slow returns a struct rtable with dst_entry set.\
\
neigh a struct neighbour, works if no cached l2 header\
neigh a part of dst!!!\
NOTE: struct rtable rt is just (struct rtable *) skb_dst(skb)!!!\
after rt is created, skb_dst_set_noref() is called with rt->dst}